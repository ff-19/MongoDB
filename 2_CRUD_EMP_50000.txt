use employee;
switched to db employee
 
> show collections;
db.Emp.insertOne({Name:{FName:"Sai",LName:"Bhosale"},Company:"TCS",Salary:4000000,Designation:"Programmer",Age:20,Expertise:["Web","AIML"],DOB:"15/02/2004",Email:"sanyamkudale@gmail.com",Contact:9322720904,Add:[{PAdd:"Pune",LAdd:"Wai"}]})
 
 
db.Emp.insertMany([{Name:{FName:"Avi",LName:"Bhosale"},Company:"Infosys",Salary:27000,Designation:"Programmer",Age:23,Expertise:["Security","DS"],DOB:"22/01/1988",Email:"pb@gmail.com",Contact:8830302417,Add:[{PAdd:{City:"Vyajwadi",Pin:41320},LAdd:"Kondhave"}]},
{Name:{FName:"Ravi",LName:"Munde"},Company:"IBM",Salary:60000,Designation:"Tester",Age:20,Expertise:["Web"],DOB:"24/05/2003",Email:"rj@gmail.com",Contact:7028003577,Add:[{PAdd:{City:"Pune",Pin:411001},LAdd:"Satara"}]},
{Name:{FName:"Yash",LName:"Waghamare"},Company:"TCS",Salary:70000,Designation:"Tester",Age:26,Expertise:["Sql","Fullstack"],DOB:"02/5/2000",Email:"kk@gmail.com",Contact:9922639260,Add:[{PAdd:{City:"Kavthe",Pin:411364},LAdd:"Wai"}]},
{Name:{FName:"Sham",LName:"Bavaskar"},Company:"TCS",Salary:70000,Designation:"Tester",Age:24,Expertise:["Mysql","Mongodb","Cassendra"],DOB:"5/05/2001",Email:"xy@gmail.com",Contact:7582302417,Add:[{PAdd:{City:"Mumbai",pin:410604},LAdd:"Pune"}]},
{Name:{FName:"Atharva",LName:"Gangarde"},Company:"ABC",Salary:550000,Designation:"Developer",Age:21,Expertise:["App","UI"],DOB:"14/09/1999",Email:"vd@gmail.com",Contact:77845484155,Add:[{PAdd:{City:"Pune",Pin:20140},LAdd:"Nagar"}]}])
 
 
1. Find name of Employee where age is less than 30 and salary 
more than 50000
>db.Emp.find({Age:{$lt:30},Salary:{$gt:50000}},{"Name.FName":1,"Name.LName":1,_id:0}).pretty();
 
2. Creates a new document if no document in the employee 
collection contains
 {Designation: "Tester", Company_name: "TCS", Age: 25}
> db.Emp.insertOne({Designation:"Tester",Company:"TCS",Age:25})
 
3. Selects all documents in the collection where the field age 
has a value less than 30 or the value of the salary field is 
greater than 40000.
> db.Emp.find({$or:[{Age:{$lt:30}},{Salary:{$gt:40000}}]}).pretty()
 
4. Find documents where Designation is not equal to "Developer"
> db.Emp.find({Designation:{$ne:"Developer"}})
 
5. Find _id, Designation, Address and Name from all documents 
where Company_name is "Infosys".
> db.Emp.find({Company:"Infosys"},{_id:1,Add:1,Name:1}).pretty()
 
6. Display only FName and LName of all Employees
> db.Emp.find({},{"Name.FName":1,"Name.LName":1,_id:0});





 
2. Finds all employees working with Company_name: "TCS" and 
increase their salary by 2000. 
> db.Emp.updateMany({Company:"TCS"},{$inc:{Salary:2000}})
 
3. Matches all documents where the value of the field Address is 
an embedded document that contains only the field city with 
the value "Pune" and the field Pin_code with the value 
"411001".
> db.Emp.find({"Add.PAdd.City":"Pune"},{"Add.PAdd.Pin":411001}).pretty()
 
4. Find employee details who are working as "Developer" or 
"Tester".
db.Emp.find({$or:[{Designation:"Developer"},{Designation:"Tester"}]}).pretty()
 
5. Drop Single documents where designation="Developer".
db.Emp.deleteOne({ Designation: "Developer" });
 
6. Count number of documents in employee collection.
> db.Emp.count();
